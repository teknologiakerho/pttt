#!/usr/bin/env python
import sys
import operator
import functools
import re
from datetime import datetime, timedelta
import click
from pttt.timetable import parse_timetable, parse_time, fit_slots, TimetableError, Timetable
from pttt.verify import VerifyError, verify_dimensions, verify_labels, verify_conflicts,\
        verify_count

DATEFMT = "%d.%m.%Y %H:%M"
timetable = None

gg = lambda mes: click.secho(mes, file=sys.stderr, fg="green")
ee = lambda mes: click.secho(mes, file=sys.stderr, fg="red")
ww = lambda mes: click.secho(mes, file=sys.stderr, fg="yellow")

@click.group(chain=True, invoke_without_command=True)
@click.option("-i", "--input", type=click.File("r"), multiple=True)
@click.option("-d", "--datefmt", default=DATEFMT)
def pttt(**kwargs):
    global timetable

    tables = [parse_timetable(i.read(), kwargs["datefmt"]) for i in kwargs["input"]]

    if not tables:
        raise click.UsageError("No input files")

    timetable = functools.reduce(operator.add, tables)

@pttt.resultcallback()
def print_timetable(res, **kwargs):
    timetable.sort()
    print(timetable)

@pttt.command()
@click.option("-f", "--file", type=click.File("r"), required=True)
@click.option("-p", "--pattern", required=True)
def rename(file, pattern):
    for idx, line in enumerate(file):
        timetable.labels[pattern % idx].name = line.strip()

@pttt.command()
@click.option("-d", "--datefmt", default=DATEFMT)
@click.argument("date")
def base(date, datefmt):
    global timetable
    timetable += datetime.strptime(date, datefmt)

@pttt.command()
@click.option("-d", "--datefmt", default=DATEFMT)
@click.option("-s", "--slot", nargs=3, multiple=True)
def fit(slot, datefmt):
    slots = [(parse_time(start, datefmt), parse_time(end, datefmt), timedelta(minutes=int(delta)))\
            for start, end, delta in slot]

    fit_slots(timetable, slots)

@pttt.command()
@click.option("--dimensions/--no-dimensions", default=True)
@click.option("--labels/--no-labels", default=True)
@click.option("--conflicts/--no-conflicts", default=True)
@click.option("-c", "--count", multiple=True)
def verify(**kwargs):
    verifiers = {
        "dimensions": verify_dimensions,
        "labels": verify_labels,
        "conflicts": verify_conflicts
    }

    errors = False

    for k,v in verifiers.items():
        if kwargs[k]:
            try:
                v(timetable)
            except VerifyError as e:
                ee("Verify error: [%s] %s" % (k, str(e)))
                errors = True

    for lp in kwargs["count"]:
        labels = [l for l in timetable.labels if re.match(lp, l)]
        try:
            verify_count(timetable, labels)
        except VerifyError as e:
            ee("Verify error: [count] %s" % str(e))
            errors = True

    if errors:
        sys.exit(-1)

    gg("Verify OK")

if __name__ == "__main__":
    pttt()
