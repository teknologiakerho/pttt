#!/usr/bin/env python
import sys
import operator
import functools
import re
from datetime import datetime, timedelta
import click
import pttt
from pttt.verify import VerifyError, verify_dimensions, verify_labels, verify_conflicts,\
        verify_count, verify_unique

datefmt = None
timetable = None

gg = lambda mes: click.secho(mes, file=sys.stderr, fg="green")
ee = lambda mes: click.secho(mes, file=sys.stderr, fg="red")
ww = lambda mes: click.secho(mes, file=sys.stderr, fg="yellow")
vv = lambda mes: click.echo(mes, file=sys.stderr)

@click.group(chain=True, invoke_without_command=True)
@click.option("-i", "--input", type=click.File("r"), multiple=True)
@click.option("-d", "--datefmt", default="infer")
@click.option("-q", "--quiet", is_flag=True)
def pttt_command(**kwargs):
    global timetable, datefmt, ww, vv

    if kwargs["quiet"]:
        # ei varotuksia
        # eikä spämmiä
        vv = ww = lambda *args, **kwargs: 1

    tables = [i.read() for i in kwargs["input"]]

    if not tables:
        return

    if kwargs["datefmt"] == "infer":
        s = tables[0].strip()
        s = s[:s.index("\t")]
        datefmt = pttt.infer_timefmt(s)
        vv("Inferred time format: %s" % datefmt)
    else:
        datefmt = kwargs["datefmt"]

    tables = (pttt.parse_timetable(t, datefmt) for t in tables)
    timetable = functools.reduce(operator.add, tables)

@pttt_command.resultcallback()
def print_timetable(res, **kwargs):
    timetable.sort()

    if datefmt[0] == "+":
        unit = pttt.get_time_parser(datefmt)(1)
        print(timetable.tostring(unit=unit))
    else:
        print(timetable.tostring(dateformat=datefmt))

@pttt_command.command()
@click.argument("file", type=click.File("r"))
def rename(file):
    done = set()

    for line in file:
        try:
            label, replacement = map(str.strip, line.split("\t"))
        except ValueError:
            ee("Parse error at line: %s" % line)
            sys.exit(1)

        if label not in timetable.labels:
            ee("No such label: %s" % label)
            sys.exit(1)

        if label in done:
            ww("Duplicate rename for label: %s" % label)

        timetable.labels[label].name = replacement
        done.add(label)

    diff = set(timetable.labels).difference(done)
    if diff:
        ww("%d un-renamed labels: %s" % (len(diff), list(sorted(diff))))

@pttt_command.command()
@click.option("-d", "--datefmt", "dfmt")
@click.argument("arg")
def base(arg, dfmt):
    global timetable, datefmt

    if dfmt is None:
        parser = pttt.get_time_parser(datefmt)

        try:
            time = parser(arg)
        except:
            fmt = pttt.infer_timefmt(arg)
            parser = pttt.get_time_parser(fmt)
        else:
            fmt = datefmt
    else:
        fmt = dfmt

    parser = pttt.get_time_parser(fmt)
    time = parser(arg)

    if dfmt is None:
        vv("base: inferred base time: %s" % time)

    if fmt[0] != "+":
        vv("base: changing absolute inferred time format: %s" % fmt)
        datefmt = fmt

    timetable += time

@pttt_command.command()
@click.option("-d", "--datefmt", "dfmt")
@click.option("-D", "--deltafmt", "Dfmt")
@click.option("-s", "--slot", nargs=3, multiple=True)
def fit(slot, dfmt, Dfmt):
    if dfmt is None:
        dfmt = datefmt

    if Dfmt is None:
        if dfmt[0] == "+":
            Dfmt = dfmt
        else:
            Dfmt = "+M"
        vv("fit: inferred delta format: %s" % Dfmt)

    dp = pttt.get_time_parser(dfmt)
    Dp = pttt.get_time_parser(Dfmt)
    slots = [(dp(start), dp(end), Dp(delta)) for start, end, delta in slot]
    pttt.fit_slots(timetable, slots)

@pttt_command.command()
@click.option("--dimensions/--no-dimensions", default=True)
@click.option("--labels/--no-labels", default=True)
@click.option("--conflicts/--no-conflicts", default=True)
@click.option("--unique/--no-unique", default=True)
@click.option("-c", "--count", multiple=True)
def verify(**kwargs):
    verifiers = {
        "dimensions": verify_dimensions,
        "labels": verify_labels,
        "conflicts": verify_conflicts,
        "unique": verify_unique
    }

    errors = False

    for k,v in verifiers.items():
        if kwargs[k]:
            try:
                v(timetable)
            except VerifyError as e:
                ee("Verify error: [%s] %s" % (k, str(e)))
                errors = True

    for lp in kwargs["count"]:
        labels = [l for l in timetable.labels if re.match(lp, l)]
        try:
            verify_count(timetable, labels)
        except VerifyError as e:
            ee("Verify error: [count] %s" % str(e))
            errors = True

    if errors:
        sys.exit(-1)

    gg("Verify OK")

if __name__ == "__main__":
    pttt_command()
